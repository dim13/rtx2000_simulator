
\ /* queens.c */
\ /* from Stanford benchmark suite */
\ /* modified for reasonable 16-bit operation */

EMPTY
: XY " DOS XY queens.hnd" EVALUATE ;

DECIMAL
\ load gnutool.4th
load GNUinst.4

\ #define true -1
\ #define false 0

\ gcc_compiled.:
( RTX 2000 code generation)

\ int tries ;
VARIABLE tries   4   CELL- ALLOT

#REGS 100 - REG-ADDR $FFC0 AND  UBR!

\ static void do_error() {
64 frame_size !
 : do_error  ( FUNC )          ( 3  top> empty )
\   { printf (" Error in Queens.\n"); }
 ." Error in Queens." cr
   ;  ( END )            ( 13  top> #2x )( RTX 2000 code generation)

( RTX 2000 code generation)


\ static void Try(i, q, a, b, c, x) int i, *q, a[], b[], c[], x[];
64 frame_size !
 : Try  ( FUNC )          ( 3  top> empty )
\             {
\             int     j;
 ( #4 dummy reload )  ( 4  top> empty )
 ( #5 dummy reload )  ( 5  top> ##8 )
 ( #6 dummy reload )  ( 6  top> ##7 ##8 )
 ( #7 dummy reload )  ( 7  top> ##4 ##7 ##8 )

 [ 2 ] MEM_ARG@       ( 8  top> ##3 ##4 ##7 ##8 )
 [ 3 ] MEM_ARG@       ( 8  top> ##2 ##3 ##4 ##7 ##8 )

\             tries += 1 ;
 1  ( LIT)            ( 15  top> ##6 ##2 ##3 ##4 ##7 ##8 )
 tries  ( SYMBOL)     ( 15  top> #0 ##6 ##2 ##3 ##4 ##7 ##8 )
 +!                   ( 15  top> #0 #0 ##6 ##2 ##3 ##4 ##7 ##8 )

\             j = 0;
 0  ( LIT)            ( 17  top> ##6 ##2 ##3 ##4 ##7 ##8 )
 5_pick ++       ( ##7)  ( 19  top> #0 ##6 ##2 ##3 ##4 ##7 ##8 )
 !                    ( 19  top> #0 #0 ##6 ##2 ##3 ##4 ##7 ##8 )

 0  ( LIT)            ( 19  top> ##6 ##2 ##3 ##4 ##7 ##8 )


\             *q = false;

\             while ( (! *q) && (j != 8) )
 5_pick ++   ( ##7)      ( 141  top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 @                    ( 141  top> ##7  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 0010 ] BRANCHNZ    ( 143  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 ( LOOP_BEGIN)        ( 21  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 [ 009 ] LABEL        ( 128  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 0_pick ++  ( ##5)       ( 28  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 8  ( LIT)            ( 28  top> ##5  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 -                    ( 29  top> #75 ##5  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 004 ] BRANCHZ      ( 29  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                 { j = j + 1;
 1  ( LIT)            ( 33  top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 +                    ( 33  top> #0 ##5  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                 *q = false;
 0  ( LIT)            ( 35  top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 6_pick ++ ( ##7)  !      ( 35  top> #0 ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

\                 if ( b[j] && a[i+j] && c[i-j+7] )
 0_pick ++       ( ##5)  ( 37  top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 37  top> #0 ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 4_pick ++  +    ( ##3)  ( 38  top> #77d ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 @                    ( 41  top> #78  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 003 ] BRANCHZ      ( 42  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )


 6_PICK ( ##8)        ( 43  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 1_pick ++ ( ##5)  +     ( 43  top> ##8  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 0_pick ++       ( ##9)  ( 44  top> ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 44  top> #0  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 6_pick ++ ( ##4)  +     ( 45  top> #82d  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 @                    ( 48  top> #83  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 103 ] BRANCHZ      ( 49  top> #0  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 7_PICK  ( ##8)       ( 50  top>  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2_pick ++  ( ##5)       ( 50  top> ##8  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 -                    ( 50  top> ##5 ##8  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 0_pick ++       ( ##10)  ( 51  top> ##10  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 51  top> #0 ##10  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 5_pick ++ ( ##2)  +     ( 52  top> #87d ##10  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 14  ( LIT)           ( 56  top> #88 ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 +                    ( 56  top> #0 #88  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 @                    ( 56  top> #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 203 ] BRANCHZ      ( 57  top> #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                     {

\                     x[i] = j;
 8_pick ++  ( ##8)       ( 60  top>  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2*                   ( 60  top> ##8  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 4_pick ++ ( ##6)  +     ( 61  top> #92d ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 3_pick ++ ( ##5) SWAP   ( 62  top> #93d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 !                    ( 62  top> #93 ##5  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                     b[j] = false;
 2_pick ++ ( ##5)        ( 64  top>  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2*                   ( 64  top> ##5  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 6_pick ++ ( ##3)  +     ( 65  top> #94d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 0 ] LIT_SWAP       ( 66  top> #95d ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 !                    ( 66  top> #95 #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                     a[i+j] = false;
 1_pick ++ ( ##9)        ( 69  top>  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2*                   ( 69  top> ##9  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 7_pick ++ ( ##4)  +     ( 70  top> #97d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 0 ] LIT_SWAP       ( 71  top> #98d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 !                    ( 71  top> #98 #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                     c[i-j+7] = false;
 0_pick ++ ( ##10)       ( 74  top> ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 74  top> ##10  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 5_pick ++ ( ##2)  +     ( 75  top> #100d  ##10 ##9 ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 14  ( LIT)           ( 77  top> #101d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 +                    ( 77  top> #0 #101d  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 0  ( LIT)            ( 77  top> #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 SWAP !               ( 77  top> #0 #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                     if ( i < 8 )
 8_pick ++ ( ##8)        ( 80  top> ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 7  ( LIT)            ( 80  top> ##8  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 <=                   ( 81  top> #103 ##8  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 006 ] BRANCHZ      ( 81  top> #0  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                         {
\                           Try(i+1,q,a,b,c,x);
 10 U!                ( top> ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
  9 U!                ( top> ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
  5 U!                ( top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 6 ] DUP_U!         ( 87  top>  ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 3 ] MEM_ARG!       ( 87  top>  ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 2 ] DUP_U!         ( 87  top>  ##2 ##3 ##4 ##7 ##8 )
 [ 2 ] MEM_ARG!       ( 87  top>  ##2 ##3 ##4 ##7 ##8 )
  3 U!                ( top> ##3 ##4 ##7 ##8 )
  4 U!                ( top> ##4 ##7 ##8 )
  7 U!                ( top> ##7 ##8 )
 [ 8 ] DUP_U!         ( top> ##8 )

 1  ( LIT)            ( 88  top> ##8 )
 +                    ( 88  top> #0 ##8 )

 7 U@                 ( 89  top> #4 )
 4 U@                 ( 90  top> #5 #4 )
 3 U@                 ( 91  top> #6 #5 #4 )
 ( #7 Calling Arg )   ( 96  top> #7 #6 #5 #4 )
 ( #6 Calling Arg )   ( 96  top> #6 #5 #4 )
 ( #5 Calling Arg )   ( 96  top> #5 #4 )
 ( #4 Calling Arg )   ( 96  top> #4 )
 -64 FP+!  ( Link)    ( 96  top> empty )
  recurse  \  Try  ( CALL)           ( 96  top> empty )
 64 FP+!  ( Unlink)   ( 96  top> empty )

\                         if ( ! *q )

 8 U@  7 U@  4 U@  3 U@  2 U@  6 U@  5 U@ ( top> ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 5_pick ++ ( ##7)        ( 101  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 @                    ( 101  top> ##7 ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ 303 ] BRANCHNZ     ( 102  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                             { b[j] = true;
 0_pick ++  ( ##5)       ( 105  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 105  top> ##5 ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 4_pick ++ ( ##3)  +     ( 106  top> #107d ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 [ -1 ] LIT_SWAP      ( 107  top> #108d  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 !                    ( 107  top> #108 #0   ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                             a[i+j] = true;
 9 U@                 ( 110  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2*                   ( 110  top> ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 5_pick ++ ( ##4)  +     ( 111  top> #110d  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 [ -1 ] LIT_SWAP      ( 112  top> #111d  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 !                    ( 112  top> #111 #0   ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

\                             c[i-j+7] = true;
 10 U@                ( 115  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 2*                   ( 115  top> ##10  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 2 U@  +              ( 116  top> #113d  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 14  ( LIT)           ( 118  top> #114d   ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 +                    ( 118  top> #0 #114d  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 -1  ( LIT)           ( 118  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 SWAP !               ( 118  top> #0 #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

\                             }
\                         }
 [ 403 ] BRANCH       ( 120  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

\                     else { *q = true;

 [ 006 ] LABEL        ( 122  top>  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

 -1  ( LIT)           ( 125  top>   ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 8_pick ++ ( ##7)  !     ( 125  top> #0   ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )


 [ 203 ] LABEL        ( 22   top>  ##10 ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 DROP ( #10 )

 [ 103 ] LABEL        ( 22  top>  ##9  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 DROP ( #9 )

 [ 003 ] LABEL        ( 22  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 [ 303 ] LABEL        ( 22  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

 [ 403 ] LABEL        ( 22  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
\                          }
\                     }
\                 }
\             };
 5_pick ++  ( ##7)       ( 25  top>   ##5 ##6 ##2 ##3 ##4 ##7 ##8  )
 @                    ( 25  top> ##7  ##5 ##6 ##2 ##3 ##4 ##7 ##8  )

 [ 009 ] BRANCHZ      ( 26  top> #0  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
 ( LOOP_END)          ( 133  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )


 [ 0010 ] LABEL       ( 142  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )

 [ 004 ] LABEL  ( 134  top>  ##5 ##6 ##2 ##3 ##4 ##7 ##8 )
  drop ( ##5)
  drop ( ##6)
  drop ( ##2)
  drop ( ##3)
  drop ( ##4)
  drop ( ##7)
  drop ( ##8)
   ;  ( END )

\ static void Doit ()
192 frame_size !
 : Doit  ( FUNC )     ( 3  top> empty )
\         {
\         int i,q;
\         int a[9], b[17], c[15], x[9];

\         i = 0 - 7;
 -7  ( LIT)           ( 6  top> empty )
 2 U!                 ( 93  top> #64 )

\         while ( i <= 16 )
 ( LOOP_BEGIN)        ( 8  top> empty )
 [ 0017 ] LABEL       ( 47  top> empty )

\             { if ( (i >= 1) && (i <= 8) ) a[i] = true;
 2 U@                 ( 16  top> empty )
 0_pick ++  ( #64)       ( 16  top> #64x )
 0>                   ( 16  top> #64x #64x )
 [ 0014 ] BRANCHZ     ( 17  top> #0x #64x )

 0_pick ++  ( #64)       ( 19  top> #64x )
 8  ( LIT)            ( 19  top> #64x #64x )
 <=                   ( 20  top> #68x #64x #64x )
 [ 0114 ] BRANCHZ     ( 20  top> #0x #64x )

 0_pick ++  ( #64)       ( 19  top> #64x )
 2*                   ( 21  top> #64x  #64x )
 UBR@ +               ( 22  top> #69d  #64x )
 [ -1 ] LIT_SWAP      ( 24  top> #70d  #64x )
 28  ( LIT)           ( 24  top> #70x #0x  #64x )
 -                    ( 24  top> #0x #0x #0x  #64x )
 !                    ( 24  top> #0x #0x  #64x )
 [ 0014 ] LABEL       ( 25  top>  #64x  )
 [ 0114 ] LABEL       ( 25  top>  #64x  )

\             if ( i >= 2 ) b[i] = true;
 0_pick ++  ( #64)       ( 19  top> #64x )
 1  ( LIT)            ( 28  top> #64x  #64x )
 >                    ( 29  top> #72x #64x  #64x )
 [ 0015 ] BRANCHZ     ( 29  top> #0x  #64x )
 0_pick ++  ( #64)       ( 19  top> #64x )
 2*                   ( 30  top> #64x #64x  )
 UBR@ +               ( 31  top> #73d #64x  )
 [ -1 ] LIT_SWAP      ( 33  top> #74d #64x  )
 64  ( LIT)           ( 33  top> #74x #0x #64x  )
 -                    ( 33  top> #0x #0x #0x #64x  )
 !                    ( 33  top> #0x #0x #64x  )

\             if ( i <= 7 ) c[i+7] = true;
 [ 0015 ] LABEL       ( 34  top>  #64x y )
 0_pick ++  ( #64)       ( 19  top> #64x )
 7  ( LIT)            ( 37  top> #64x #64x  )
 <=                   ( 38  top> #76x #64x  #64x )
 [ 0016 ] BRANCHZ     ( 38  top> #0x #64x  )

 0_pick ++  ( #64)       ( 19  top> #64x )
 2*                   ( 39  top> #64x #64x  )
 UBR@ +               ( 40  top> #77d #64x  )
 [ -1 ] LIT_SWAP      ( 42  top> #78d  #64x )
 82  ( LIT)           ( 42  top> #78x #0x  #64x )
 -                    ( 42  top> #0x #0x #0x  #64x )
 !                    ( 42  top> #0x #0x #64x  )
 [ 0016 ] LABEL       ( 43  top>  #64x  )

\             i = i + 1;
 1  ( LIT)            ( 46  top> #64x )
 +                    ( 46  top> #0x #64x )
 [ 2 ] DUP_U!         ( 11  top> #64 )

 16  ( LIT)           ( 11  top> #64x )
 >                    ( 12  top> #66x #64x )
 [ 0017 ] BRANCHZ     ( 12  top> #0x )
 ( TYPE 1 LOOP END)   ( 52  top> empty )
\             };

 [ 0019 ] LABEL       ( 94  top> empty )

\         Try(1, &q, b, a, c, x);
 UBR@                 ( 60  top> empty )
 96  ( LIT)           ( 60  top> #30x )
 -                    ( 60  top> #0x #30x )
 [ 2 ] MEM_ARG!       ( 60  top> #0x )
 UBR@                 ( 62  top> empty )
 116  ( LIT)          ( 62  top> #30x )
 -                    ( 62  top> #0x #30x )
 [ 3 ] MEM_ARG!       ( 62  top> #0x )
 1  ( LIT)            ( 63  top> empty )
 UBR@                 ( 64  top> #4 )
 120  ( LIT)          ( 64  top> #30x #4 )
 -                    ( 64  top> #0x #30x #4 )
 UBR@                 ( 65  top> #5 #4 )
 64  ( LIT)           ( 65  top> #30x #5 #4 )
 -                    ( 65  top> #0x #30x #5 #4 )
 UBR@                 ( 66  top> #6 #5 #4 )
 28  ( LIT)           ( 66  top> #30x #6 #5 #4 )
 -                    ( 66  top> #0x #30x #6 #5 #4 )
 ( #7 Calling Arg )   ( 71  top> #6 #5 #4 )
 ( #6 Calling Arg )   ( 71  top> #6 #5 #4 )
 ( #5 Calling Arg )   ( 71  top> #5 #4 )
 ( #4 Calling Arg )   ( 71  top> #4 )
 -192 FP+!  ( Link)   ( 71  top> empty )
   Try  ( CALL)       ( 71  top> empty )
 192 FP+!  ( Unlink)  ( 71  top> empty )

\         if ( ! q )
\          { do_error();
 [ -62 ] MEM_ARG@            ( 76  top> empty )
 [ 0018 ] BRANCHNZ  ( 77  top> #0x )
 -192 FP+!  ( Link)   ( 81  top> empty )
   do_error  ( CALL)  ( 81  top> empty )
 192 FP+!  ( Unlink)  ( 81  top> empty )
\             tries += 1000 ;
 1000  ( LIT)         ( 85  top> empty )
 tries  ( SYMBOL)     ( 85  top> #0x )
 +!                   ( 85  top> #0x #0x )
\          }
\         };
 EXIT  [ 0018 ] LABEL ( 87  top> empty )
   ;  ( END )


\ void main ()
64 frame_size !
 : main  ( FUNC )    ( 3  top> empty )
#REGS 100 - REG-ADDR $FFC0 AND  UBR!
\     {
\     int i;

\     for ( i = 1; i <= 2500; i++ )
 1  ( LIT)           ( 6  top> empty )
 [ 0025 ADD_INDEX ] >R          ( 44  top> #64 )
 ( TYPE 1 LOOP BEGIN) ( 7  top> empty )

\      {
 [ 0025 ] LABEL            ( 32  top> empty )

\         tries = 0 ;
 0  ( LIT)            ( 14  top> empty )
 tries  ( SYMBOL)     ( 14  top> #0x )
 !                    ( 14  top> #0x #0x )

\         Doit();
 -64 FP+!  ( Link)    ( 17  top> empty )
   Doit  ( CALL)      ( 17  top> empty )
 64 FP+!  ( Unlink)   ( 17  top> empty )

\         if (tries != 113 )  do_error();
 tries  ( SYMBOL)     ( 20  top> empty )
 @                    ( 20  top> #0x )
 113  ( LIT)          ( 22  top> #66x )
 -                    ( 23  top> #67x #66x )
 [ 0023 ] BRANCHZ     ( 23  top> #0x )
 -64 FP+!  ( Link)    ( 25  top> empty )
   do_error  ( CALL)  ( 25  top> empty )
 64 FP+!  ( Unlink)   ( 25  top> empty )
 [ 0023 ] LABEL       ( 30  top> empty )
 R>                   ( 31  top> empty )
 1  ( LIT)            ( 31  top> #64x )
 +                    ( 31  top> #0x #64x )
 DUP_>R               ( 10  top> #64 )
dup . 2500  ( LIT)              ( 10  top> #64x )
 U>                   ( 11  top> #65x #64x )
 [ 0025 ] BRANCHZ     ( 11  top> #0x )
\      }
\     };
 [ 0025 DROP_INDEX ] R>DROP  ( 37  top> empty )
 EXIT  [ 0026 ] LABEL            ( 45  top> empty )
   ;  ( END )

.( 2500 max) cr
